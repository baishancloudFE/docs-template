"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var slash = require(`slash`);
var path = require(`path`);
var fs = require(`fs-extra`);
var mime = require(`mime`);
var prettyBytes = require(`pretty-bytes`);

var md5File = require(`bluebird`).promisify(require(`md5-file`));

var createId = function createId(path) {
  var slashed = slash(path);
  return `${slashed} absPath of file`;
};

exports.createId = createId;

exports.createFileNode = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(pathToFile) {
    var pluginOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var slashed, slashedFile, contentDigest, stats;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            slashed = slash(pathToFile);
            slashedFile = (0, _extends3.default)({}, path.parse(slashed), {
              absolutePath: slashed
              // console.log('createFileNode', slashedFile.absolutePath)
            });
            _context.next = 4;
            return md5File(slashedFile.absolutePath);

          case 4:
            contentDigest = _context.sent;
            _context.next = 7;
            return fs.stat(slashedFile.absolutePath);

          case 7:
            stats = _context.sent;
            return _context.abrupt("return", JSON.parse(JSON.stringify((0, _extends3.default)({
              // Don't actually make the File id the absolute path as otherwise
              // people will use the id for that and ids shouldn't be treated as
              // useful information.
              id: createId(pathToFile),
              children: [],
              parent: `___SOURCE___`,
              internal: {
                contentDigest: contentDigest,
                mediaType: mime.lookup(slashedFile.ext),
                type: `File`
              },
              sourceInstanceName: pluginOptions.name || `__PROGRAMATTIC__`,
              absolutePath: slashedFile.absolutePath,
              relativePath: slash(path.relative(pluginOptions.path || process.cwd(), slashedFile.absolutePath)),
              extension: slashedFile.ext.slice(1).toLowerCase(),
              size: stats.size,
              prettySize: prettyBytes(stats.size),
              modifiedTime: stats.mtime,
              accessTime: stats.atime,
              changeTime: stats.ctime,
              birthTime: stats.birthtime
            }, slashedFile, stats))));

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x2) {
    return _ref.apply(this, arguments);
  };
}();